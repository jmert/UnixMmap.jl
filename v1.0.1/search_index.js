var documenterSearchIndex = {"docs":
[{"location":"lib/public/","page":"Public","title":"Public","text":"CurrentModule = UnixMmap","category":"page"},{"location":"lib/public/#Public-Documentation","page":"Public","title":"Public Documentation","text":"","category":"section"},{"location":"lib/public/#Functions","page":"Public","title":"Functions","text":"","category":"section"},{"location":"lib/public/","page":"Public","title":"Public","text":"The following functions are available on all Unix systems.","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"UnixMmap.mmap\nUnixMmap.mincore\nUnixMmap.madvise!\nUnixMmap.msync!","category":"page"},{"location":"lib/public/#UnixMmap.mmap","page":"Public","title":"UnixMmap.mmap","text":"mmap(file::Union{IO,AbstractString}[, ::Type{Array{T}}, dims]; kws...)\nmmap(::Type{Array{T}}, dims; kws...)\n\nMemory maps an Array from a file file of size dims (either a scalar Integer or a tuple of dimension lengths), or creates an anonymous mapping not backed by a file if no file is given.\n\nIf not specified, the array type defaults to Array{UInt8}, and dim defaults to a vector with length equal to the number of elements remaining in the file (accounting for a non-zero position in the file stream io).\n\nExtended help\n\nThis function provides a relatively simple wrapper around the underlying mmap system call. In particular, it is the user's responsibility to ensure the combination(s) of stream state (e.g. read/write or read-only, file length), protection flags, and memory map flags must form a valid mmap request, as they are not validated here.\n\nSee your system mmap man page for details on the behaviors of each flag.\n\nKeywords\n\nThe following keywords are available:\n\nflags::MmapFlags — any of the MAP_* system-specific constants. For files, this defaults to MAP_SHARED, and anonymous mappings default to MAP_SHARED | MAP_ANONYMOUS.\nprot::MmapProtection — any of the PROT_* flags. The default is PROT_READ | PROT_WRITE for all anonymous maps and memory maps of non-existent files (in which case the file will be created). If the file already exists, it is opened read-only and the default is PROT_READ only.\noffset::Integer — offset in bytes from the beginning of the file, defaulting to the current stream position. This keyword is not valid for anonymous maps.\ngrow::Bool — Whether to grow a file to accomodate the memory map, if the file is writable. Defaults to true. This keyword is not valid for anonymous maps.\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#UnixMmap.mincore","page":"Public","title":"UnixMmap.mincore","text":"mincore(array::Array)\n\nReturns a boolean array (of length fld1(sizeof(m), PAGESIZE)) indicating whether the pages of the memory-mapped array are resident in RAM. Pages corresponding to false values will cause a fault if referenced.\n\nnote: Note\nMemory maps are always page-aligned, so an offset which is not a multiple of PAGESIZE will result in a return array where the first element does not correspond to the first PAGESIZE ÷ sizeof(eltype(array)) elements of array — i.e. the first page may cover memory addresses before the first element of array.\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#UnixMmap.madvise!","page":"Public","title":"UnixMmap.madvise!","text":"madvise!(array, flag::AdviseFlags = MADV_NORMAL)\n\nAdvises the kernel on the intended usage of the memory-mapped array, with the intent flag being one of the available MADV_* constants.\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#UnixMmap.msync!","page":"Public","title":"UnixMmap.msync!","text":"msync!(array, flag::SyncFlags = MS_SYNC)\n\nSynchronizes the memory-mapped array and its backing file on disk.\n\n\n\n\n\n","category":"function"},{"location":"lib/public/","page":"Public","title":"Public","text":"OS-specific constants for use with mmap and madvise! are defined at (pre)compile time. The following systems are supported based on the available OS predicates via Julia's Base.Sys.KERNEL and Base.Sys.is* functions (some of which are only available for Julia v1.1+).","category":"page"},{"location":"lib/public/#Constants-—-Linux","page":"Public","title":"Constants — Linux","text":"","category":"section"},{"location":"lib/public/","page":"Public","title":"Public","text":"import ..LinuxMmap: UnixMmap # hide\nimport Main._flag_docs # hide","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"<table>\n    <thead>\n    <tr><td><code>MmapProtection</code></td>\n        <td><code>MmapFlags</code></td>\n        <td><code>AdviseFlags</code></td>\n        <td><code>SyncFlags</code></td>\n    </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"_flag_docs(UnixMmap.MmapProtection) # hide","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"            </td>\n            <td>","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"_flag_docs(UnixMmap.MmapFlags) # hide","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"            </td>\n            <td>","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"_flag_docs(UnixMmap.AdviseFlags) # hide","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"            </td>\n            <td>","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"_flag_docs(UnixMmap.SyncFlags) # hide","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"            </td>\n        </tr>\n    </tbody>\n</table>","category":"page"},{"location":"lib/public/#Constants-—-Apple","page":"Public","title":"Constants — Apple","text":"","category":"section"},{"location":"lib/public/","page":"Public","title":"Public","text":"import ..AppleMmap: UnixMmap # hide\nimport Main._flag_docs # hide","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"<table>\n    <thead>\n    <tr><td><code>MmapProtection</code></td>\n        <td><code>MmapFlags</code></td>\n        <td><code>AdviseFlags</code></td>\n        <td><code>SyncFlags</code></td>\n    </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"_flag_docs(UnixMmap.MmapProtection) # hide","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"            </td>\n            <td>","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"_flag_docs(UnixMmap.MmapFlags) # hide","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"            </td>\n            <td>","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"_flag_docs(UnixMmap.AdviseFlags) # hide","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"            </td>\n            <td>","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"_flag_docs(UnixMmap.SyncFlags) # hide","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"            </td>\n        </tr>\n    </tbody>\n</table>","category":"page"},{"location":"lib/public/#Constants-—-DragonFly-BSD","page":"Public","title":"Constants — DragonFly BSD","text":"","category":"section"},{"location":"lib/public/","page":"Public","title":"Public","text":"import ..DragonFlyMmap: UnixMmap # hide\nimport Main._flag_docs # hide","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"<table>\n    <thead>\n    <tr><td><code>MmapProtection</code></td>\n        <td><code>MmapFlags</code></td>\n        <td><code>AdviseFlags</code></td>\n        <td><code>SyncFlags</code></td>\n    </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"_flag_docs(UnixMmap.MmapProtection) # hide","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"            </td>\n            <td>","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"_flag_docs(UnixMmap.MmapFlags) # hide","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"            </td>\n            <td>","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"_flag_docs(UnixMmap.AdviseFlags) # hide","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"            </td>\n            <td>","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"_flag_docs(UnixMmap.SyncFlags) # hide","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"            </td>\n        </tr>\n    </tbody>\n</table>","category":"page"},{"location":"lib/public/#Constants-—-FreeBSD","page":"Public","title":"Constants — FreeBSD","text":"","category":"section"},{"location":"lib/public/","page":"Public","title":"Public","text":"import ..FreeBSDMmap: UnixMmap # hide\nimport Main._flag_docs # hide","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"<table>\n    <thead>\n    <tr><td><code>MmapProtection</code></td>\n        <td><code>MmapFlags</code></td>\n        <td><code>AdviseFlags</code></td>\n        <td><code>SyncFlags</code></td>\n    </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"_flag_docs(UnixMmap.MmapProtection) # hide","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"            </td>\n            <td>","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"_flag_docs(UnixMmap.MmapFlags) # hide","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"            </td>\n            <td>","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"_flag_docs(UnixMmap.AdviseFlags) # hide","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"            </td>\n            <td>","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"_flag_docs(UnixMmap.SyncFlags) # hide","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"            </td>\n        </tr>\n    </tbody>\n</table>","category":"page"},{"location":"lib/public/#Constants-—-NetBSD","page":"Public","title":"Constants — NetBSD","text":"","category":"section"},{"location":"lib/public/","page":"Public","title":"Public","text":"import ..NetBSDMmap: UnixMmap # hide\nimport Main._flag_docs # hide","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"<table>\n    <thead>\n    <tr><td><code>MmapProtection</code></td>\n        <td><code>MmapFlags</code></td>\n        <td><code>AdviseFlags</code></td>\n        <td><code>SyncFlags</code></td>\n    </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"_flag_docs(UnixMmap.MmapProtection) # hide","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"            </td>\n            <td>","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"_flag_docs(UnixMmap.MmapFlags) # hide","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"            </td>\n            <td>","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"_flag_docs(UnixMmap.AdviseFlags) # hide","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"            </td>\n            <td>","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"_flag_docs(UnixMmap.SyncFlags) # hide","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"            </td>\n        </tr>\n    </tbody>\n</table>","category":"page"},{"location":"lib/public/#Constants-—-OpenBSD","page":"Public","title":"Constants — OpenBSD","text":"","category":"section"},{"location":"lib/public/","page":"Public","title":"Public","text":"import ..OpenBSDMmap: UnixMmap # hide\nimport Main._flag_docs # hide","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"<table>\n    <thead>\n    <tr><td><code>MmapProtection</code></td>\n        <td><code>MmapFlags</code></td>\n        <td><code>AdviseFlags</code></td>\n        <td><code>SyncFlags</code></td>\n    </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"_flag_docs(UnixMmap.MmapProtection) # hide","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"            </td>\n            <td>","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"_flag_docs(UnixMmap.MmapFlags) # hide","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"            </td>\n            <td>","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"_flag_docs(UnixMmap.AdviseFlags) # hide","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"            </td>\n            <td>","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"_flag_docs(UnixMmap.SyncFlags) # hide","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"            </td>\n        </tr>\n    </tbody>\n</table>","category":"page"},{"location":"#UnixMmap.jl-Documentation","page":"Home","title":"UnixMmap.jl Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Installation and loading is as easy as:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add UnixMmap\n\njulia> using UnixMmap","category":"page"},{"location":"","page":"Home","title":"Home","text":"A file can be memory mapped (read-only by default) by calling UnixMmap.mmap with a filename and the Array type to be applied (and optionally with dimensions to give a shape):","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> UnixMmap.mmap(\"arbitrary.dat\", Vector{Float64})\n192-element Vector{Float64}:\n 0.0\n 0.0\n ⋮\n 0.0\n 0.0\n\njulia> UnixMmap.mmap(\"arbitrary.dat\", Matrix{Float64}, (64, 3))\n64×3 Matrix{Float64}:\n 0.0  0.0  0.0\n 0.0  0.0  0.0\n ⋮\n 0.0  0.0  0.0\n 0.0  0.0  0.0","category":"page"},{"location":"","page":"Home","title":"Home","text":"while an anonymous memory map can be created by instead specifying the Array type and dimensions:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> UnixMmap.mmap(Matrix{Float64}, (128, 3))\n128×3 Matrix{Float64}:\n 0.0  0.0  0.0\n 0.0  0.0  0.0\n ⋮\n 0.0  0.0  0.0\n 0.0  0.0  0.0","category":"page"},{"location":"","page":"Home","title":"Home","text":"The notable features that UnixMmap.jl provides over the standard library's Mmap module is the ability to set Unix-specific flags during mapping. For example, on Linux the MAP_POPULATE flag can be used to advise the kernel to prefault all mapped pages into active memory.","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> UnixMmap.mmap(\"arbitrary.dat\", Matrix{Float64}, (64, 3);\n                     flags = UnixMmap.MAP_SHARED | UnixMmap.MAP_POPULATE)\n64×3 Matrix{Float64}:\n 0.0  0.0  0.0\n 0.0  0.0  0.0\n ⋮\n 0.0  0.0  0.0\n 0.0  0.0  0.0","category":"page"},{"location":"","page":"Home","title":"Home","text":"UnixMmap.jl provides OS-specific flags for several Unixes; see the Constants section for more details.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The package also exposes the UnixMmap.madvise!, UnixMmap.msync!, and UnixMmap.mincore functions which correspond closely to the underlying system calls.","category":"page"},{"location":"#Library-API-Reference","page":"Home","title":"Library API Reference","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"lib/public.md\",\n]\nDepth = 1","category":"page"}]
}
